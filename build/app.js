(()=>{"use strict";function e(e){return`${e.rank}${{d:"♦",c:"♣",h:"♥",s:"♠"}[e.suit]}`}function t(e){const t="dhsc".indexOf(e.suit);return 4*"3456789TJQKA2".indexOf(e.rank)+t}function s(e,t){return e.findIndex((e=>e.rank===t.rank&&e.suit===t.suit))}function a(e){return Array.isArray(e)?e.map(a):e&&"object"==typeof e?Object.fromEntries(Object.entries(e).map((([e,t])=>[e.replace(/([A-Z])/g,"_$1").toLowerCase(),a(t)]))):e}function n(e){return Array.isArray(e)?e.map(n):e&&"object"==typeof e?Object.fromEntries(Object.entries(e).map((([e,t])=>[e.replace(/_([a-z])/g,((e,t)=>t.toUpperCase())),n(t)]))):e}const i=new class{constructor(){this.state={},this.subscribers=[]}subscribe(e){this.subscribers.push(e),e.update(this.state)}update(e){this.state=e(this.state),this.subscribers.forEach((e=>e.update(this.state)))}getState(){return this.state}},r=new class{constructor(e){this.stateStore=e}handle(e){if("ERROR"===e.messageType)this.handleErrorMessage(e.payload);else if("PLAYER_JOINED"===e.messageType)this.handlePlayerJoined(e.payload);else if("GAME_STATE"===e.messageType)if(e.payload.sharedView){const t=e.payload;this.handleSharedGameState(t.sharedView)}else if(e.payload.privateView){const t=e.payload;this.handlePrivateGameState(t.privateView)}}handlePlayerJoined(e){const t=`Players in room: ${e.playerIds.join(", ")}`;this.stateStore.update((s=>Object.assign(Object.assign({},s),{alertMsg:t,roomId:e.roomId})))}handleErrorMessage(e){this.stateStore.update((t=>Object.assign(Object.assign({},t),{alertMsg:`Error: ${e.error}`,selectedCards:[]})))}handleSharedGameState(e){var t;let s;e.result&&(s=`Game over. Results: ${null===(t=e.result)||void 0===t?void 0:t.players.map((e=>`${e.playerId}: ${e.distToAvg}`)).join(" / ")}`);const a="UPDATE_POINTS"==e.status?[]:this.stateStore.getState().myCards;this.stateStore.update((t=>Object.assign(Object.assign({},t),{sharedGameState:e,alertMsg:s,myCards:a})))}handlePrivateGameState(e){const t=e.cards,a=this.stateStore.getState().myCards||[],n=t.sort(((e,t)=>s(a,e)-s(a,t)));this.stateStore.update((e=>Object.assign(Object.assign({},e),{myCards:n,alertMsg:void 0,selectedCards:[]})))}}(i),d=new class{onMessage(e){this.callbackOnMessage=e}send(e){var t;null===(t=this.ws)||void 0===t||t.send(JSON.stringify(a(e)))}connect(e){try{this.ws=new WebSocket(e),this.ws.onopen=()=>{console.log("Socket connected")},this.ws.onmessage=e=>{var t;null===(t=this.callbackOnMessage)||void 0===t||t.call(this,n(JSON.parse(e.data)))},this.ws.onclose=()=>{console.log("Socket closed")},this.ws.onerror=e=>{console.log(`Socket error: ${e}`)}}catch(e){console.log(`Socket error: ${e}`)}}},o=prompt("Enter server URL","ws://localhost:8765");d.connect(o),d.onMessage((e=>{r.handle(e)}));const l=new class{constructor(e,t){this.socketService=e,this.stateStore=t}joinGame(){this.socketService.send({playerId:this.stateStore.getState().playerId,requestType:"JOIN_GAME_BY_TYPE",payload:{gameType:"chinese_poker"}})}makeMove(){const{playerId:e,selectedCards:t,roomId:s}=this.stateStore.getState();this.socketService.send({playerId:e,requestType:"MAKE_MOVE",payload:{roomId:s,move:{cards:t}}})}}(d,i),c=new class{constructor(e){var t;this.stateStore=e,this.authBtn=document.getElementById("auth-btn"),this.playerIdSpan=document.getElementById("player-id"),null===(t=this.authBtn)||void 0===t||t.addEventListener("click",this.onAuthBtnClick.bind(this))}update(e){this.playerIdSpan&&(this.playerIdSpan.innerText=e.playerId?e.playerId:""),this.authBtn&&(this.authBtn.innerText=e.playerId?"Logout":"Login")}onAuthBtnClick(){if(this.stateStore.getState().playerId)this.stateStore.update((e=>Object.assign(Object.assign({},e),{playerId:""})));else{const e=prompt("Enter your player ID");e&&this.stateStore.update((t=>Object.assign(Object.assign({},t),{playerId:e})))}}}(i);i.subscribe(c);const h=new class{constructor(e){var t;this.gameService=e,this.joinBtn=document.getElementById("join-btn"),null===(t=this.joinBtn)||void 0===t||t.addEventListener("click",this.onJoinBtnClick.bind(this))}onJoinBtnClick(){this.gameService.joinGame()}update(e){var t,s,a;e.playerId&&!e.roomId||"END_GAME"===(null===(t=e.sharedGameState)||void 0===t?void 0:t.status)?null===(s=this.joinBtn)||void 0===s||s.classList.remove("hidden"):null===(a=this.joinBtn)||void 0===a||a.classList.add("hidden")}}(l);i.subscribe(h);const u=new class{constructor(){this.alertMsgSpan=document.getElementById("alert-msg")}update(e){this.alertMsgSpan&&(this.alertMsgSpan.textContent=e.alertMsg?e.alertMsg:"")}};i.subscribe(u);const m=new class{constructor(){this.table=document.getElementById("table")}reset(){for(var e;null===(e=this.table)||void 0===e?void 0:e.firstChild;)this.table.removeChild(this.table.firstChild)}offsetToPosition(e){if(0===e)return"bottom";if(1===e)return"left";if(2===e)return"top";if(3===e)return"right";throw new Error(`Invalid offset: ${e}`)}update(t){var s;this.reset();const a=null===(s=t.sharedGameState)||void 0===s?void 0:s.players;if(a){const s=a.findIndex((e=>e.playerId===t.playerId));a.forEach(((n,i)=>{var r,d,o;const l=(i-s+a.length)%a.length;if(0!=l){const s=(null===(r=t.sharedGameState)||void 0===r?void 0:r.currentPlayerId)===n.playerId,a=null===(d=t.sharedGameState)||void 0===d?void 0:d.moveHistory.filter((e=>e.playerId===n.playerId)).pop(),i=function(t,s,a,n){const i=document.createElement("div");i.classList.add("opponent"),i.classList.add(s);const r=document.createElement("div");if(r.classList.add("opponent-info"),r.innerHTML=a?`<div class="player-status">\n                                <span>${t.playerId} - ${t.numPoints}pts</span>\n                                <div class="dealer-token"></div>\n                            </div>\n                            <div class="card card-back">${t.numCards}</div>`:`\n                            <span>${t.playerId} - ${t.numPoints}pts</span>\n                            <div class="card card-back">${t.numCards}</div>\n                            `,i.appendChild(r),n){const t=document.createElement("div");if(t.classList.add("hand-container"),0===n.cards.length){const e=document.createElement("div");e.classList.add("pass-move"),e.innerHTML="Pass",t.appendChild(e)}else n.cards.forEach((s=>{const a=document.createElement("div");a.classList.add("card"),a.classList.add("card-mini"),"d"===s.suit||"h"===s.suit?a.classList.add("red"):a.classList.add("black");const n=e(s);a.innerHTML=n,t.appendChild(a)}));i.appendChild(t)}return i}(n,this.offsetToPosition(l),s,a);null===(o=this.table)||void 0===o||o.appendChild(i)}}))}}};i.subscribe(m);const p=new class{constructor(e,t){var s;this.stateStore=e,this.gameService=t,this.myInfoSpan=document.getElementById("my-info"),this.myCardsContainer=document.getElementById("my-cards"),this.myDealerToken=document.getElementById("my-dealer-token"),this.makeMoveBtn=document.getElementById("make-move-btn"),this.myHistoryContainer=document.getElementById("my-history"),null===(s=this.makeMoveBtn)||void 0===s||s.addEventListener("click",(()=>{this.gameService.makeMove()}))}reset(){var e,t;for(this.myInfoSpan&&(this.myInfoSpan.innerHTML="");null===(e=this.myCardsContainer)||void 0===e?void 0:e.firstChild;)this.myCardsContainer.removeChild(this.myCardsContainer.firstChild);for(this.myDealerToken&&(this.myDealerToken.style.display="none"),this.makeMoveBtn&&(this.makeMoveBtn.style.display="none");null===(t=this.myHistoryContainer)||void 0===t?void 0:t.firstChild;)this.myHistoryContainer.removeChild(this.myHistoryContainer.firstChild)}cardIsSelected(e,t){return t.some((t=>t.rank===e.rank&&t.suit===e.suit))}toggleSelection(e,t){return-1===t.findIndex((t=>t.rank===e.rank&&t.suit===e.suit))?[...t,e]:t.filter((t=>t.rank!==e.rank||t.suit!==e.suit))}update(s){var a,n,i;this.reset();const r=null===(a=s.sharedGameState)||void 0===a?void 0:a.players.find((e=>e.playerId===s.playerId));if(!r)return;const d=`${r.playerId} - ${r.numPoints}pts`;this.myInfoSpan&&(this.myInfoSpan.innerHTML=d),(null===(n=s.sharedGameState)||void 0===n?void 0:n.currentPlayerId)===s.playerId&&(this.myDealerToken&&(this.myDealerToken.style.display="block"),this.makeMoveBtn&&(this.makeMoveBtn.style.display="block"));const o=s.myCards;o&&o.forEach((a=>{var n;const i=document.createElement("div");i.classList.add("card"),i.classList.add("card-front"),this.cardIsSelected(a,s.selectedCards||[])&&i.classList.add("selected"),"d"===a.suit||"h"===a.suit?i.classList.add("red"):i.classList.add("black");const r=e(a);i.innerHTML=r,i.onclick=()=>{this.stateStore.update((e=>{const t=this.toggleSelection(a,e.selectedCards||[]);return Object.assign(Object.assign({},e),{selectedCards:t})}))},i.ondblclick=()=>{this.stateStore.update((e=>{var s;const a=null===(s=e.myCards)||void 0===s?void 0:s.slice().sort(((e,s)=>t(e)-t(s)));return Object.assign(Object.assign({},e),{myCards:a,selectedCards:[]})}))},null===(n=this.myCardsContainer)||void 0===n||n.appendChild(i)}));const l=null===(i=s.sharedGameState)||void 0===i?void 0:i.moveHistory,c=null==l?void 0:l.filter((e=>e.playerId===s.playerId)).pop();if(c)if(0===c.cards.length){if(this.myHistoryContainer){const e=document.createElement("div");e.classList.add("pass-move"),e.innerHTML="Pass",this.myHistoryContainer.appendChild(e)}}else c.cards.forEach((t=>{var s;const a=document.createElement("div");a.classList.add("card"),a.classList.add("card-mini"),"d"===t.suit||"h"===t.suit?a.classList.add("red"):a.classList.add("black");const n=e(t);a.innerHTML=n,null===(s=this.myHistoryContainer)||void 0===s||s.appendChild(a)}))}}(i,l);i.subscribe(p)})();